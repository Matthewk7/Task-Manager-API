components:
  parameters:
  requestBodies:
  responses:

  schemas:
    User:
      type: object
      properties:
        user:
          type: object
          properties:
            age:
              type: string
              example: 20
            _id:
              type: string
              example: 610f8ed3caaa3200152ab022
            name:
              type: string
              example: John Doe
            email:
              type: string
              example: example@example.com
            createdAt:
              type: string
              example: 2021-08-08T08:03:11.740Z
            updatedAt:
              type: string
              example: 2021-08-08T08:03:11.905Z
            __v:
              type: int
              example: 1
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MTBmOGZiZmNhYWEzMjAwMTUyYWIwMmMiLCJpYXQiOjE2Mjg0MDk3OTF9.dUaSzU_3Hcv1KeH5EAQX1ELH6omXx7vXCNHFcJRBVns
  securitySchemes:
    bearerAuth:
      type: http
      bearerFormat: JWT
      scheme: bearer
      in: header
      name: Authorizaiton

paths:
  /users:
    post:
      summary: Create a user
      tags: [User]
      description: Create a user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                  required: true
                age:
                  type: int
                  example: 20
                  default: 0
                email:
                  type: string
                  example: john@example.com
                  required: true
                password:
                  type: string
                  example: example123
                  required: true
      responses:
        201:
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/login:
    post:
      summary: Login
      tags: [User]
      description: Login to a user's account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: john@example.com
                password:
                  type: string
                  example: example123
      responses:
        200:
          description: Login Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/logout:
    post:
      summary: Logout
      tage: [User]
      description: Logout of a user's account
      security:
        - bearerAuth: []
      responses:
        200:
          description: Logout Successful
